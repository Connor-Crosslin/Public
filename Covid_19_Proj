---
title: "Covid 19 Project"
author: "CC"
date: "`r Sys.Date()`"
output: pdf_document
---

## Statement of Interest:

Let's investigate trends in Covid-19 data and conclude with a model to see if we can predict the number of deaths based on the number of cases. We want to investigate Global cases, cases in the US, and cases by state as well and see what trends may emerge (or not emerge). Centrally we want to know just how closley cases and death are related form a data based perspective.

## 1. Get the data & import necessary libraries

```{r}
library(lubridate)
library(tidyverse)
global_cases = read_csv("https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
global_deaths = read_csv("https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
US_cases = read_csv("https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv")
US_deaths = read_csv("https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv")
```

## 2. Clean up the data

```{r, echo=FALSE}

#We want to have each row be a date, rather than a column for both US and global cases
#Also we make sure date is in date format

global_cases = global_cases %>%
  pivot_longer(cols = -c("Province/State", "Country/Region", Lat, Long), 
               names_to = "date", 
               values_to = "cases") %>%
  select(-c(Lat, Long)) #We don't need Lat Long values for our analysis

global_deaths = global_deaths %>%
  pivot_longer(cols = -c(`Province/State`, `Country/Region`, Lat, Long),
              names_to = "date", 
              values_to = "deaths") %>%
  select(-c(Lat, Long)) #We don't need Lat Long values for our analysis

global = global_cases %>%
    full_join(global_deaths) %>%
    rename(Country_Region = `Country/Region`, Province_State = `Province/State`) %>%
    mutate(date = mdy(date)) 

#Take out instances where there were zero cases

global = global %>% filter(cases>0)

global %>% filter (cases > 28000000)

US_cases = US_cases %>% 
    pivot_longer(cols = -(UID:Combined_Key),
                 names_to = "date",
                 values_to = "cases") %>%
    select(Admin2:cases) %>%
    mutate(date = mdy(date)) %>%
    select(-c(Lat, Long_))

US_deaths = US_deaths %>%
    pivot_longer(cols = -(UID:Population),
                 names_to = "date",
                 values_to = "deaths") %>%
    select(Admin2:deaths) %>%
    mutate(date = mdy(date)) %>%
    select(-c(Lat, Long_))

US = US_cases %>%
    full_join(US_deaths)

global = global %>%
    unite("Combine_Key",
         c(Province_State, Country_Region),
         sep = ",",
         na.rm = TRUE,
         remove = FALSE)
```

## 3. Get population data and do some visualizations

```{r}
uid_lookup_url = "https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv"
uid = read_csv(uid_lookup_url) %>%
    select(-c(Lat, Long_, Combined_Key, code3, iso2, iso3, Admin2))

global = global %>%
    left_join(uid, by = c("Province_State", "Country_Region")) %>%
    select(-c(UID, FIPS)) %>%
    select(Province_State, Country_Region, date, cases, deaths, Population, Combine_Key)

US_by_state = US %>%
    group_by(Province_State, Country_Region, date) %>%
    summarize(cases = sum(cases), deaths = sum(deaths),
             Population = sum(Population)) %>%
    mutate(deaths_per_mill = deaths * 1000000/Population) %>%
    select(Province_State, Country_Region, date, cases, deaths, deaths_per_mill, Population) %>%
    ungroup()

US_totals = US_by_state %>%
    group_by(Country_Region, date) %>%
    summarize(cases = sum(cases), deaths = sum(deaths),
    Population = sum(Population)) %>%
    mutate(deaths_per_mill = deaths*1000000 / Population) %>%
    select(Country_Region, date, cases, deaths, deaths_per_mill, Population) %>%
    ungroup()

tail(US_totals)

US_totals %>%
    filter(cases > 0) %>%
    ggplot(aes(x = date, y = cases)) + 
    geom_line(aes(color = "cases")) + 
    geom_point(aes(color = "cases")) + 
    geom_line(aes(y = deaths, color = "deaths")) +
    geom_point(aes(y = deaths, color = "deaths")) +
    scale_y_log10() + 
    theme(legend.position = "bottom",
         axis.text.x = element_text(angle = 90)) + 
    labs(title = "COVID19 in US", y = NULL)

state = "Texas"

US_by_state %>%
    filter(Province_State == state) %>%
    filter(cases > 0) %>%
    ggplot(aes(x = date, y = cases)) + 
    geom_line(aes(color = "cases")) + 
    geom_point(aes(color = "cases")) + 
    geom_line(aes(y=deaths, color = "deaths")) +
    geom_point(aes(y = deaths, color = "deaths")) +
    scale_y_log10() + 
    theme(legend.position = "bottom",
         axis.text.x = element_text(angle = 90)) + 
    labs(title = str_c("COVID19 in ", state), y = NULL)

US_by_state = US_by_state %>%
    mutate(new_cases = cases - lag(cases),
          new_deaths = deaths - lag(deaths))

US_totals = US_totals %>%
    mutate(new_cases = cases - lag(cases),
          new_deaths = deaths - lag(deaths))
tail(US_totals %>% select(new_cases, new_deaths, everything()))

#Let's plot new cases against new deaths over time.

US_totals %>%
    ggplot(aes(x = date, y = new_cases)) + 
    geom_line(aes(color = "new_cases")) + 
    geom_point(aes(color = "new_cases")) + 
    geom_line(aes(y= new_deaths, color = "new_deaths")) +
    geom_point(aes(y = new_deaths, color = "new_deaths")) +
    scale_y_log10() + 
    theme(legend.position = "bottom",
         axis.text.x = element_text(angle = 90)) + 
    labs(title = "COVID19 in US", y = NULL)

#Let's plot new cases against new deaths over time for Texas.

US_by_state %>%
    filter(Province_State == state) %>%
    filter(cases > 0) %>%
    ggplot(aes(x = date, y = new_cases)) + 
    geom_line(aes(color = "new_cases")) + 
    geom_point(aes(color = "new_cases")) + 
    geom_line(aes(y= new_deaths, color = "new_deaths")) +
    geom_point(aes(y = new_deaths, color = "new_deaths")) +
    scale_y_log10() + 
    theme(legend.position = "bottom",
         axis.text.x = element_text(angle = 90)) + 
    labs(title = str_c("COVID19 in ", state), y = NULL)

US_state_totals = US_by_state %>%
    group_by(Province_State) %>%
    summarize(deaths = max(deaths), cases = max(cases),
         population = max(Population),
         cases_per_thou = 1000*cases/population,
         deaths_per_thou = 100*deaths/population) %>%
    filter(cases > 0 , population > 0)

# Add bar plots of top 10 and bottom 10 states by cases per thousand. 

low_10_states = US_state_totals[order(US_state_totals$cases_per_thou, decreasing = FALSE),]
low_10_states = low_10_states[1:10, c(1:6)]
top_10_states = US_state_totals[order(US_state_totals$cases_per_thou, decreasing = TRUE),]
top_10_states = top_10_states[1:10, c(1:6)]

barplot(sort(top_10_states$deaths_per_thou, decreasing = TRUE), 
        las = 2, 
        names.arg = top_10_states$Province_State,
        main = "Top 10 States, deaths per thousand")

barplot(sort(low_10_states$deaths_per_thou, decreasing = FALSE), 
        las=2, 
        names.arg = top_10_states$Province_State, 
        ylim = c(0, max(top_10_states$deaths_per_thou)),
        main = "Bottom 10 States, deaths per thousand")
```

## 4.Build a model

```{r}

#See if cases per thousand is a predictor for deaths per thousand

model = lm(deaths_per_thou ~ cases_per_thou, data = US_state_totals)
summary(model)

US_tot_w_pred = US_state_totals %>% mutate(pred = predict(model))

US_tot_w_pred %>% 
  ggplot() + 
  geom_point(aes(x = cases_per_thou, y = deaths_per_thou), color = "blue")+
  geom_point(aes(x = cases_per_thou, y = pred), color = "red")

```

## 5. Concluding analysis with bias identification

Possible areas of bias could be selection bias - we are uncertain how Covid deaths were counted, if co-morbidity were included or not (the controversial "with Covid" vs "from Covid"). Due to such politically charged motivations it may be impossible to ever get a clear concrete answer to this. Additionally, there are geographic factors not captured in the data set that could potentially account for differences in cases per thousand.
